! if, else if, select case, conditional expression
 Ada[1], if condition then <dl><dd>statements</dd></dl> «else <dl><dd>statements»</dd></dl> end if, if condition1 then <dl><dd>statements</dd></dl> elsif condition2 then <dl><dd>statements</dd></dl>... «else <dl><dd>statements»</dd></dl> end if, case expression is<dl><dd>when value_list1 => statements</dd><dd>when value_list2 => statements</dd></dl>...<dl><dd>«when others => statements» </dd></dl>end case, (if condition1 then <dl><dd>expression1</dd></dl> «elsif condition2 then <dl><dd>expression2»</dd></dl> ... else <dl><dd>expressionn</dd></dl>) (case expression is <dl><dd>when value_list1 => expression1</dd><dd>when value_list2 => expression2</dd></dl> ... <dl><dd> «when others => expressionn» </dd></dl>)
 Seed7, case expression of when set1 : statements ... «otherwise: statements» end case, 
 Modula-2, if condition then <dl><dd>statements</dd></dl> «else <dl><dd>statements»</dd></dl> end, if condition1 then <dl><dd>statements</dd></dl> elsif condition2 then <dl><dd>statements</dd></dl>... «else <dl><dd>statements»</dd></dl> end, case expression of caseLabelList : statements | ... «else statements» end, 
 ALGOL 68 & "brief form", if condition then statements «else statements» fi, if condition then statements elif condition then statements fi, case switch in statements  statements« ... out statements» esac, ( condition | valueIfTrue | valueIfFalse )
 statements «| statements» ), statements |: condition | statements ), statements ... «| statements» )
 APL, :If condition <dl><dd>instructions</dd></dl> «:Else <dl><dd>instructions»</dd></dl>:EndIf, :If condition <dl><dd>instructions</dd></dl> :ElseIf condition <dl><dd>instructions</dd></dl> ... «:Else <dl><dd>instructions»</dd></dl> :EndIf, :Select expression :Case case1 <dl><dd>instructions</dd></dl> ... «:Else<dl><dd>instructions»</dd></dl>:EndSelect, {condition:valueIfTrue ? valueIfFalse}
 C (C99), if (condition) instructions «else instructions» instructions can be a single statement or a block in the form of: { statements }, if (condition) instructions else if (condition) instructions ... «else instructions» Strictly speaking  there is no "else if" language construct. It is simply a second if statement used as the instructions of the first. if (condition) instructions else { if (condition) instructions }, switch (variable) {<dl><dd>case case1: instructions «break;» ... «default: instructions»</dd></dl>}, condition ? valueIfTrue : valueIfFalse
 Objective-C
 C++ (STL)
 D
 Java
 JavaScript
 PHP
 C#, All non-empty cases must end with a break or goto case statement (that is  they are not allowed to fall-through to the next case). The default case is not required to come last. switch (variable) { case case1: instructions «break_or_jump_statement» ... «default: instructions break_or_jump_statement» }
 Windows PowerShell, if (condition) { instructions } elseif (condition) { instructions } ... «else { instructions }», switch (variable) { case1 { instructions «break;» } ... «default { instructions }»}, 
 Go, if condition {instructions} «else {instructions}», if condition {instructions} else if condition {instructions} ... «else {instructions}» or switch {<dl><dd>case condition: instructions ... «default: instructions»</dd></dl>}, switch variable {<dl><dd>case case1: instructions ... «default: instructions»</dd></dl>}, 
 Swift, if condition {instructions} «else {instructions}», if condition {instructions} else if condition {instructions} ... «else {instructions}», switch variable {<dl><dd>case case1: instructions ... «default: instructions»</dd></dl>}, 
 Perl, if (condition) {instructions} «else {instructions}» or unless (notcondition) {instructions} «else {instructions}», if (condition) {instructions} elsif (condition) {instructions} ... «else {instructions}» or unless (notcondition) {instructions} elsif (condition) {instructions} ... «else {instructions}», use feature "switch"; ... given (variable) {<dl><dd>when (case1) { instructions } ... «default { instructions }»</dd></dl>}, condition ? valueIfTrue : valueIfFalse
 Perl 6, if condition {instructions} «else {instructions}» or unless notcondition {instructions}, if condition {instructions} elsif condition {instructions} ... «else {instructions}, given variable {<dl><dd>when case1 { instructions } ... «default { instructions }»</dd></dl>}, condition ?? valueIfTrue, valueIfFalse
 Ruby, if condition <dl><dd>instructions</dd></dl> «else <dl><dd>instructions»</dd></dl>, if condition <dl><dd>instructions</dd></dl> elsif condition <dl><dd>instructions</dd></dl> ... «else <dl><dd>instructions»</dd></dl> end, case variable when case1 <dl><dd>instructions</dd></dl> ... «else<dl><dd>instructions»</dd></dl>end, condition ? valueIfTrue : valueIfFalse
 Scala, if (condition) {instructions} «else {instructions}», if (condition) {instructions} else if (condition) {instructions} ... «else {instructions}», expression match {<dl><dd>case pattern1 => expression case pattern2 => expression ... «case _ => expression»</dd></dl>}{{ref|pattern matching|[b]}}, if (condition) valueIfTrue else valueIfFalse
 Smalltalk, condition ifTrue: <dl><dd>trueBlock</dd></dl> «ifFalse: <dl><dd>falseBlock»</dd></dl> end, , , condition ifTrue: trueBlock ifFalse: falseBlock
 Common Lisp, (when condition <dl><dd>instructions)</dd></dl> or (unless condition <dl><dd>instructions)</dd></dl> or (if condition <dl><dd>(progn instructions)</dd><dd>«(progn instructions)»)</dd></dl>, (cond (condition1 instructions) <dl><dd>(condition2 instructions)</dd><dd>...</dd><dd>«(t instructions)»)</dd></dl>, (case expression<dl><dd>(case1 instructions)</dd><dd>(case2 instructions)</dd><dd>...</dd><dd>«(otherwise instructions)»)</dd></dl>, (if condition valueIfTrue valueIfFalse)
 Scheme, (when conditioninstructions) or (if condition (begin instructions) «(begin instructions)»), (cond (condition1 instructions) (condition2 instructions) ... «(else instructions)»), (case (variable) ((case1) instructions) ((case2) instructions) ... «(else instructions)»)
 ISLISP, (if condition <dl><dd>(progn instructions)</dd><dd>«(progn instructions)»)</dd></dl>, (cond (condition1 instructions) <dl><dd>(condition2 instructions)</dd><dd>...</dd><dd>«(t instructions)»)</dd></dl>, (case expression<dl><dd>(case1 instructions)</dd><dd>(case2 instructions)</dd><dd>...</dd><dd>«(t instructions)»)</dd></dl>, (if condition valueIfTrue valueIfFalse)
 Pascal, if condition then begin <dl><dd>instructions</dd></dl> end «else begin<dl><dd>instructions</dd></dl>end»{{ref|pascal semicolon|[c]}}, if condition then begin <dl><dd>instructions</dd></dl> end else if condition then begin<dl><dd>instructions</dd></dl> end ... «else begin<dl><dd>instructions</dd></dl> end»{{ref|pascal semicolon|[c]}}, case variable of <dl><dd>case1: instructions ... «else: instructions»</dd></dl>end{{ref|pascal semicolon|[c]}}
 Visual Basic, If condition Then <dl><dd>instructions</dd></dl> «Else <dl><dd>instructions»</dd></dl>End If Single-line: If we let instructions be: statement : statement : ... If condition Then instructions« Else instructions», If condition Then<dl><dd>instructions</dd></dl> ElseIf condition Then<dl><dd>instructions</dd></dl> ... «Else <dl><dd>instructions»</dd></dl>End If Single-line: See note about C-like languages; the Else clause of a single-line If statement can contain another single-line If statement., Select« Case» variable<dl><dd>Case case_pattern</dd>1<dl><dd>instructions</dd></dl><dd>...</dd><dd>«Case Else<dl><dd>instructions»</dd></dl></dd></dl>End Select, IIf(condition  valueIfTrue  valueIfFalse)
 Visual Basic .NET, If(condition  valueIfTrue  valueIfFalse)
 Xojo
 Python {{ref|python indent|[a]}}, if condition : {{keypress|Tab}} instructions «else: {{keypress|Tab}} instructions», if condition : {{keypress|Tab}} instructions elif condition : {{keypress|Tab}} instructions ... «else: {{keypress|Tab}} instructions», , valueIfTrue if condition else valueIfFalse (Python 2.5+)
 S-Lang, if (condition) { instructions } «else { instructions }», if (condition) { instructions } else if (condition) { instructions } ... «else { instructions }», switch (variable) { case case1: instructions } { cas